7th
#include <iostream>
using namespace std;

#define MAX 25

int main() {
    int b[MAX], f[MAX], nb, nf;
    cout << "\n_First Fit_\n\nEnter no. of blocks: ";
    cin >> nb;
    cout << "Enter no. of processes: ";
    cin >> nf;

    cout << "\nBlock sizes:\n";
    for (int i = 0; i < nb; i++) cin >> b[i];

    cout << "\nProcess sizes:\n";
    for (int i = 0; i < nf; i++) cin >> f[i];

    cout << "\nProcess\tSize\tBlock\tB.Size\tFragment\n";
    for (int i = 0; i < nf; i++) {
        bool allocated = false;
        for (int j = 0; j < nb; j++) {
            if (f[i] <= b[j]) {
                cout << i+1 << "\t" << f[i] << "\t" << j+1 << "\t" << b[j] 
                     << "\t" << b[j]-f[i] << endl;
                b[j] -= f[i];
                allocated = true;
                break;
            }
        }
        if (!allocated) cout << i+1 << "\t" << f[i] << "\tWAIT\n";
    }
}

8th
#include <iostream>
using namespace std;

int main() {
    int n, f;
    cout << "Enter number of pages: ";
    cin >> n;
    int pages[n];
    cout << "Enter page reference string: ";
    for (int i = 0; i < n; i++){
            cin >> pages[i];
    }
    cout << "Enter number of frames: ";
    cin >> f;
    int frames[f], front = 0, pageFaults = 0, pageHits = 0;
    for (int i = 0; i < f; i++){
            frames[i] = -1;
     }
    for (int i = 0; i < n; i++) {
        bool found = false;
        for (int j = 0; j < f; j++){
            if (frames[j] == pages[i]) {
                    found = true; break;
            }
         }
        if (!found) {
            frames[front] = pages[i];
            front = (front + 1) % f;
            pageFaults++;
        } else {
            pageHits++;
        }
        cout << "After page " << pages[i] << " -> [ ";
        for (int j = 0; j < f; j++) {
            if (frames[j] == -1) cout << "- ";
            else cout << frames[j] << " ";
        }
        cout << "]\n";
    }
    cout << "\nTotal Page Faults (FIFO): " << pageFaults;
    cout << "\nTotal Page Hits   (FIFO): " << pageHits;
    cout << "\nMiss Ratio: " << (float)pageFaults / n;
    cout << "\nHit  Ratio: " << (float)pageHits / n;
}
